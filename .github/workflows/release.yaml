name: release

on:
  release:
    types: [published]
        
env:
  REGISTRY_IMAGE: ngocptblaplafla/pandoc-texlive-full
jobs:
  prepare:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install components
        run: bash install-components.sh
      - name: Upload pandoc data
        uses: actions/upload-artifact@v4
        with:
          name: pandoc-assets
          path: pandoc-assets.zip
      - name: Upload Release Asset
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release upload --clobber ${{github.ref_name}} pandoc-assets.zip
      - name: Update repo description on Dockerhub
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ngocptblaplafla/pandoc-texlive-full
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 600
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Remove unused components
        uses: ngocptblaplafla/more-space-plz@v1
        with:
          android-sdk: true
          dotnet: true
          google-chrome: true
          nodejs: true
          microsoft-edge: true
          mono: true
          miniconda: true
          snap: true
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - name: Create tag for stable release
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          flavor: latest=false
          tags: |
            type=raw,value=temp-do-not-use
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and Push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          file: Dockerfile.build
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: mode=max
          sbom: true
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
  merge:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Remove unused components
        uses: ngocptblaplafla/more-space-plz@v1
        with:
          android-sdk: true
          dotnet: true
          google-chrome: true
          nodejs: true
          microsoft-edge: true
          mono: true
          miniconda: true
          snap: true
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      - name: Create tag for stable release
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          flavor: latest=false
          tags: |
            type=raw,value=temp-do-not-use
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
  load-app:
    runs-on: ubuntu-latest
    timeout-minutes: 600
    needs: [prepare,merge]
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Remove unused components
        uses: ngocptblaplafla/more-space-plz@v1
        with:
          android-sdk: true
          dotnet: true
          google-chrome: true
          nodejs: true
          microsoft-edge: true
          mono: true
          miniconda: true
          snap: true
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - name: Create tag for stable release
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          flavor: latest=false
          tags: |
            type=raw,enable=${{ endsWith(github.ref, '-release') }},value=latest
            type=raw,enable=${{ endsWith(github.ref, '-nightly') }},value=nightly
            type=raw,enable=${{ endsWith(github.ref, '-nightly') }},value={{date 'YYYY-MM-DD_HH:mm:ss'}}
            type=ref,event=tag
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download pandoc data
        uses: actions/download-artifact@v4
        with:
          name: pandoc-assets
      - name: unzip data
        run: rm -rf pandoc && unzip pandoc-assets.zip
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          file: Dockerfile.loadapp
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: mode=max
          sbom: true
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-s2-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
  final-merge:
    runs-on: ubuntu-latest
    needs: load-app
    steps:
      - name: Remove unused components
        uses: ngocptblaplafla/more-space-plz@v1
        with:
          android-sdk: true
          dotnet: true
          google-chrome: true
          nodejs: true
          microsoft-edge: true
          mono: true
          miniconda: true
          snap: true
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-s2-*
          merge-multiple: true
      - name: Create tag for stable release
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          flavor: latest=false
          tags: |
            type=raw,enable=${{ endsWith(github.ref, '-release') }},value=latest
            type=raw,enable=${{ endsWith(github.ref, '-nightly') }},value=nightly
            type=raw,enable=${{ endsWith(github.ref, '-nightly') }},value={{date 'YYYY-MM-DD_HH:mm:ss'}}
            type=ref,event=tag
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      - name: Get tags
        run: |
          TAG=${{github.ref_name}}
          if [ $TAG = "main" ]; then 
            TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          fi
          echo $TAG
          echo "TAG=$TAG" >> $GITHUB_ENV
      - name: Check image
        uses: docker/scout-action@v1
        with:
          command: cves,recommendations
          image: "${{ env.REGISTRY_IMAGE }}:${{env.TAG}}"
          github-token: ${{ secrets.GITHUB_TOKEN }}